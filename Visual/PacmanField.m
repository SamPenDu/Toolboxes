function img = PacmanField(Stim, WinDim, Noise)%img = PacmanField(Stim, [WinDim, Noise])%% Draws a field of Gaussian Pacmen defined by the Stim. % % Parameters:%   Stim :      Stimulus structure with parameters for each element%   WinDim :    Width of the image (optional)%   Noise :     Luminance noise from normal distribution (optional)%% The struct Stim contains the parameters:%   Stim.N =         Number of elements in display%   Stim.Sigma =     Standard deviation of the envelopes %% And per element parameters in row vectors:%   Stim.X =         X-coordinates%   Stim.Y =         Y-coordinates%   Stim.Contrast =  Contrast of elements (optional, default = 1)%   Stim.Segment =   1x3 vector defining the "mouth" of the pacman.%                       This is the start/end polar angles and the radius.%% Returns an image which can be displayed or saved to disk. %% ensure positioning is correctStim.Y = -Stim.Y;% find elements that are actually inside the stimulus spaceinels = find(abs(Stim.X) <= 1 & abs(Stim.Y) <= 1);% image dimensions in pixels if nargin < 2    WinDim = 400;    Noise = 0;elseif nargin < 3    Noise = 0;end% if size is the same in all elementsif length(Stim.Sigma) == 1    Stim.Sigma = ones(Stim.N,1) * Stim.Sigma;end% if mouth is the same in all elementsif length(Stim.Segment) == 3    Stim.Segment = repmat(Stim.Segment, Stim.N, 1);end% size of actual image (depends on maximal Gabor size)winSize = WinDim + 4*max(Stim.Sigma) + 2;img = ones(winSize, winSize)/2 + randn(winSize, winSize)*Noise;% rendering the Gaborsfor i = inels'    % GaussianDot(input image, sigma, phase, xpos, ypos, contrast, pacman)    img = GaussianDot(img, Stim.Sigma(i), ...  %Size of Gaussian         winSize/2 + round(Stim.X(i) * WinDim/2), ...  %X-coordinates        winSize/2 + round(Stim.Y(i) * WinDim/2), ...  %Y-coordinates        Stim.Contrast(i), ... %contrast of element         Stim.Segment(i,:));   %mouth of pacmanend% chop off the outer margin nowimg = img(2*max(Stim.Sigma)+2:winSize-(2*max(Stim.Sigma)+1), 2*max(Stim.Sigma)+2:winSize-(2*max(Stim.Sigma)+1));